<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Products Management</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="/css/styles_admin.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <script src="https://kit.fontawesome.com/a076d05399.js"></script>

    <style>
        /* Modal Styling */
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.4);
        }
    
        .modal-content {
            background-color: white;
            margin: 10% auto;
            padding: 20px;
            border-radius: 8px;
            width: 300px;
            text-align: center;
        }
    
        .close {
            float: right;
            font-size: 20px;
            cursor: pointer;
        }
    
        /* Product List Styling */
        .product-list {
            display: grid;
            grid-template-columns: repeat(4, 1fr); /* 4 products per row by default */
            gap: 20px;
            margin-top: 20px;
        }
    
        .product-item {
            background-color: #f4f4f4;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
        }
    
        .product-actions {
            margin-top: 10px;
        }

        .product-image {
        max-width: 100%;   /* Ensure the image is responsive and fills its container */
        height: auto;      /* Maintain the aspect ratio of the image */
        max-height: 150px; /* Limit the height of the image */
        object-fit: cover; /* Ensures the image covers the area without distortion */
        margin-bottom: 10px;
    }

    .btn-edit, .btn-delete{
        padding: 4px;
        border: solid;
    }

    input, textarea {
        border: solid;
        border-radius: 5px;

    }
    
        /* Make the layout responsive for mobile devices */
        @media (max-width: 768px) {
            .product-list {
                grid-template-columns: repeat(2, 1fr); /* 2 products per row on smaller screens */
            }
        }
    
    </style>
    
</head>
<body>

    <div class="container">
        <%- include('partials/sidebar', { currentPage: 'products' }) %>

        <!-- Main Content -->
        <main class="content">
            <header>
                <h1 class="text-2xl font-bold text-slate-700 dark:text-white transition-colors duration-300">Products</h1>
                <button id="openAddproductModal" class="btn-primary" ><a href="/admin/products/add" >
                    <i class="fas fa-plus"></i> Add Product</a>
                </button>
                
            </header>

            <section class="product-list">
                <% products.forEach(product => { %>
                    <div class="product-item" data-id="<%= product.id %>" style="margin-bottom: 10px ;">
                        <img class="product-image" src="/image/<%= product.image && product.image[0] ? product.image[0].name : 'placeholder.jpg' %>" alt="Product Image" />
                        <h3 style="margin-bottom: 5px ;"><%= product.name %></h3>
                        <p>$<%= product.price %></p>
                        <p><span><%= product.quantity %></span></p>
                        <p><span><span>Categories: <%= product.categories.map(c => c.category.name).join(", ") %></span></span></p>
                        <p>Description:  <%= product.description %></p>
                        <div class="product-actions">
                            <button onclick="editProduct('<%= product.id %>')" class="btn-edit"><i class="fa-solid fa-pen"></i> Edit </button>
                            <button onclick="deleteProduct('<%= product.id %>')" class="btn-delete"><i class="fa-solid fa-trash-can"></i> Remove </button>
                        </div>
                    </div>
                <% }); %>
            </section>
        </main>
    </div>

<!-- Edit Product Modal -->
<div id="editProductModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeModal()">&times;</span>
        <h2>Edit Product</h2>
        <form id="editProductForm" onsubmit="submitEditProduct(event)">
            <input type="hidden" id="productId" name="productId">
            <label for="productName">Name:</label>
            <input type="text" id="productName" name="name" required>
            <br>
            <label for="productPrice">Price:</label>
            <input type="number" id="productPrice" name="price" required>
            <br>
            <label for="productDescription">Description:</label>
            <br>
            <textarea id="productDescription" name="description" required></textarea>
            <br>
            <label for="productQuantity">Quantity:</label>
            <input type="number" id="productQuantity" name="quantity" required>
            <br>
            <!-- Category Checkboxes will be inserted here -->
             <p>Categories:</p>
            <div id="categoryCheckboxes"></div>

            <button type="submit" style="border: solid; border-radius: 5px; padding: 2px;">Save</button>
        </form>
    </div>
</div>



    <script>
        async function deleteProduct(productId) {
            const confirmation = confirm("Are you sure you want to delete this product?");
            
            if (confirmation) {
                try {
                    const response = await fetch(`/product/${productId}`, {
                        method: 'DELETE',
                    });
    
                    if (response.ok) {
                        alert("Product deleted successfully!");
                        document.querySelector(`.product-item[data-id='${productId}']`).remove();  // Remove the product from the DOM
                    } else {
                        alert("Failed to delete product.");
                    }
                } catch (error) {
                    alert("An error occurred while deleting the product.");
                    console.error(error);
                }
            }
        }

        async function editProduct(productId) {
    const response = await fetch(`/admin/products/edit/${productId}`);
    const product = await response.json();

    if (response.ok) {
        // Pre-fill the form with the product details
        document.getElementById('productId').value = product.id;
        document.getElementById('productName').value = product.name;
        document.getElementById('productPrice').value = product.price;
        document.getElementById('productDescription').value = product.description;
        document.getElementById('productQuantity').value = product.quantity;

        // Load and display categories
        const categoriesResponse = await fetch('/categories'); // Fetch all categories
        const categories = await categoriesResponse.json();

        //console.log(categories);

        const categoryCheckboxesContainer = document.getElementById('categoryCheckboxes');
        categoryCheckboxesContainer.innerHTML = ''; // Clear any previous checkboxes

        // Loop through the categories and create checkboxes
        categories.forEach(category => {
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.name = 'categories[]'; // Array for selected categories
            checkbox.value = category.id;
            checkbox.id = `category-${category.id}`;
            
            // Check if the product is already associated with the category
            const isChecked = product.categories.some(pCat => pCat.categoryId === category.id);
            if (isChecked) {
                checkbox.checked = true;
            }

            const label = document.createElement('label');
            label.setAttribute('for', `category-${category.id}`);
            label.innerText = category.name;

            // Append the checkbox and label to the container
            categoryCheckboxesContainer.appendChild(checkbox);
            categoryCheckboxesContainer.appendChild(label);
            categoryCheckboxesContainer.appendChild(document.createElement('br')); // Line break
        });

        // Display the modal
        document.getElementById('editProductModal').style.display = 'block';
    } else {
        alert("Product not found!");
    }
}



    // Close modal function
    function closeModal() {
        document.getElementById('editProductModal').style.display = 'none';
        location.reload();
    }

    async function submitEditProduct(event) {
    event.preventDefault(); // Prevent default form submission

    const productId = document.getElementById('productId').value;
    const productName = document.getElementById('productName').value;
    const productPrice = document.getElementById('productPrice').value;
    const productDescription = document.getElementById('productDescription').value;
    const productQuantity = document.getElementById('productQuantity').value;

    // Capture selected categories
    const selectedCategories = [];
    const checkboxes = document.querySelectorAll('input[name="categories[]"]:checked');
    checkboxes.forEach(checkbox => {
        selectedCategories.push(Number(checkbox.value)); // Capture selected category IDs
    });

    const response = await fetch(`/admin/products/edit/${productId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            name: productName,
            price: parseFloat(productPrice),
            description: productDescription,
            quantity: parseInt(productQuantity),
            categories: selectedCategories, // Send selected categories
        }),
    });

    const updatedProduct = await response.json();

    if (response.ok) {
        alert("Product updated successfully!");
        // Update the product info on the page
        document.querySelector(`.product-item[data-id='${productId}'] h3`).innerText = updatedProduct.name;
        document.querySelector(`.product-item[data-id='${productId}'] p`).innerText = `$${updatedProduct.price}`;
        document.querySelector(`.product-item[data-id='${productId}'] p span`).innerText = updatedProduct.quantity;

        // Update categories
        /*document.querySelector(`.product-item[data-id='${productId}'] p:nth-of-type(4)`).innerText =
            'Categories: ' + updatedProduct.categories.map(c => c.name).join(", ");*/

        // Close the modal
        closeModal();
    } else {
        alert("Failed to update product.");
    }
}


    </script>
    
</body>
</html>
